{{define "queryCodeWPgx"}}
{{range .GoQueries}}
{{if $.OutputQuery .SourceName}}
{{if and (ne .Cmd ":copyfrom") (ne (hasPrefix .Cmd ":batch") true)}}
const {{.ConstantName}} = {{$.Q}}-- name: {{.MethodName}} {{.Cmd}}
{{escape .SQL}}
{{$.Q}}
{{end}}

{{if ne (hasPrefix .Cmd ":batch") true}}
{{if .Arg.EmitStruct}}
type {{.Arg.Type}} struct { {{- range .Arg.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}

{{if .Ret.EmitStruct}}
type {{.Ret.Type}} struct { {{- range .Ret.Struct.Fields}}
  {{.Name}} {{.Type}} {{if .Tag}}{{$.Q}}{{.Tag}}{{$.Q}}{{end}}
  {{- end}}
}
{{end}}
{{end}}

{{if eq .Cmd ":one"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) (*{{.Ret.Type}}, error) {
	dbRead := func() (any, time.Duration, error) {
        cacheDuration := time.Duration(time.Millisecond * {{.Option.Cache.Milliseconds}})
	    row := q.db.WQueryRow(ctx, "{{.MethodName}}", {{.ConstantName}}, {{.Arg.Params}})
	    {{.Ret.Name}} := &{{.Ret.Type}}{}
	    err := row.Scan({{.Ret.Scan}})
        if err == pgx.ErrNoRows {
            return nil, cacheDuration, nil
        }
	    return {{.Ret.Name}}, cacheDuration, err
    }
	if q.cache == nil {
		v, _, err := dbRead()
		return v.(*{{.Ret.Type}}), err
	}

	// TODO(mustRevalidate, noStore)
	var v *{{.Ret.Type}}
	err := q.cache.GetWithTtl(ctx, "TODO", &v, dbRead, false, false)
	if err != nil {
		return nil, err
	}
	return v, err

}
{{end}}

{{if eq .Cmd ":many"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) ([]{{.Ret.DefineType}}, error) {
	dbRead := func() (any, time.Duration, error) {
        cacheDuration := time.Duration(time.Millisecond * {{.Option.Cache.Milliseconds}})
        rows, err := q.db.WQuery(ctx, "{{.MethodName}}", {{.ConstantName}}, {{.Arg.Params}})
		if err != nil {
			return nil, 0, err
		}
		defer rows.Close()
	    var items []{{.Ret.DefineType}}
		for rows.Next() {
		    var {{.Ret.Name}} {{.Ret.Type}}
		    if err := rows.Scan({{.Ret.Scan}}); err != nil {
			    return nil, 0, err
		    }
		    items = append(items, {{.Ret.ReturnName}})
		}
		if err := rows.Err(); err != nil {
			return nil, 0, err
		}
		return items, cacheDuration, nil
	}
	if q.cache == nil {
		items, _, err := dbRead()
		return items.([]{{.Ret.DefineType}}), err
	}

	// TODO(mustRevalidate, noStore)
	var items []{{.Ret.DefineType}}
	err := q.cache.GetWithTtl(ctx, "TODO", &items, dbRead, false, false)
	if err != nil {
		return nil, err
	}
	return items, err
}
{{end}}

{{if eq .Cmd ":exec"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) error {
	_, err := q.db.WExec(ctx, "{{.MethodName}}", {{.ConstantName}}, {{.Arg.Params}})
	return err
}
{{end}}

{{if eq .Cmd ":execrows"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) (int64, error) {
	result, err := q.db.WExec(ctx, "{{.MethodName}}", {{.ConstantName}}, {{.Arg.Params}})
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
{{end}}

{{if eq .Cmd ":execresult"}}
{{range .Comments}}//{{.}}
{{end -}}
func (q *Queries) {{.MethodName}}(ctx context.Context, {{.Arg.Pair}}) (pgconn.CommandTag, error) {
	return q.db.WExec(ctx, "{{.MethodName}}", {{.ConstantName}}, {{.Arg.Params}})
}
{{end}}


{{end}}
{{end}}
{{end}}
