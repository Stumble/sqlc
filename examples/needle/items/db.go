// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0-65-ge5c2ed73-dirty-wicked-fork

package items

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/stumble/wpgx"
)

type WGConn interface {
	WQuery(
		ctx context.Context, name string, unprepared string, args ...interface{}) (pgx.Rows, error)
	WQueryRow(
		ctx context.Context, name string, unprepared string, args ...interface{}) pgx.Row
	WExec(
		ctx context.Context, name string, unprepared string, args ...interface{}) (pgconn.CommandTag, error)
	WCopyFrom(ctx context.Context, name string, tableName pgx.Identifier, columnNames []string, rowSrc pgx.CopyFromSource) (int64, error)

	PostExec(f wpgx.PostExecFunc) error
}

type ReadWithTtlFunc = func() (any, time.Duration, error)

// BeforeDump allows you to edit result before dump.
type BeforeDump func(m *Item)

type Cache interface {
	GetWithTtl(
		ctx context.Context, key string, target any,
		readWithTtl ReadWithTtlFunc, noCache bool, noStore bool) error
	Set(ctx context.Context, key string, val any, ttl time.Duration) error
	Invalidate(ctx context.Context, key string) error
}

func New(db WGConn, cache Cache) *Queries {
	return &Queries{db: db, cache: cache}
}

type Queries struct {
	db    WGConn
	cache Cache
}

func (q *Queries) WithTx(tx *wpgx.WTx) *Queries {
	return &Queries{
		db:    tx,
		cache: q.cache,
	}
}

func (q *Queries) WithCache(cache Cache) *Queries {
	return &Queries{
		db:    q.db,
		cache: cache,
	}
}

var Schema = `
CREATE TYPE ItemCategory AS ENUM (
    'ALCOHOL ',
    'DRUG',
    'DRINK',
    'FRUIT',
    'VEGETABLE'
);

CREATE TABLE IF NOT EXISTS Items (
   ID           BIGSERIAL GENERATED ALWAYS AS IDENTITY,
   Name         VARCHAR(255)        NOT NULL,
   Description  VARCHAR(255)        NOT NULL,
   Category     ItemCategory        NOT NULL,
   Price        DECIMAL(10,2)       NOT NULL,
   Thumbnail    TEXT                NOT NULL,
   QRCode       CHAR(1024),
   Metadata     JSON,
   CreatedAt    TIMESTAMP           NOT NULL DEFAULT NOW(),
   UpdatedAt    TIMESTAMP           NOT NULL DEFAULT NOW(),
   PRIMARY KEY(ID)
) PARTITION BY RANGE (ID);

CREATE TABLE IF NOT EXISTS items_id_le_1000
PARTITION OF Items FOR VALUES
FROM (0) TO (1000);

-- local index on (Name)
CREATE INDEX IF NOT EXISTS items_id_le_1000_name_idx
ON items_id_le_1000 (Name);

-- global index on created_at
CREATE INDEX IF NOT EXISTS items_created_at_idx
    ON Items (CreatedAt);
`
