// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package items

import (
	"context"

	"github.com/jackc/pgtype"
)

const createItems = `-- name: CreateItems :one
INSERT INTO Items (
  Name, Description, Category, Price, Thumbnail, Metadata
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, description, category, price, thumbnail, metadata, createdat, updatedat
`

type CreateItemsParams struct {
	Name        string
	Description string
	Category    Itemcategory
	Price       pgtype.Numeric
	Thumbnail   string
	Metadata    []byte
}

func (q *Queries) CreateItems(ctx context.Context, arg CreateItemsParams) (Item, error) {
	row := q.db.QueryRow(ctx, createItems,
		arg.Name,
		arg.Description,
		arg.Category,
		arg.Price,
		arg.Thumbnail,
		arg.Metadata,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Thumbnail,
		&i.Metadata,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM Items
WHERE id = $1
`

// -- invalidate : [GetItemByID]
func (q *Queries) DeleteItem(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteItem, id)
	return err
}

const getItemByID = `-- name: GetItemByID :one
SELECT id, name, description, category, price, thumbnail, metadata, createdat, updatedat FROM Items
WHERE id = $1 LIMIT 1
`

// -- cache : 5m
func (q *Queries) GetItemByID(ctx context.Context, id int64) (Item, error) {
	row := q.db.QueryRow(ctx, getItemByID, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Category,
		&i.Price,
		&i.Thumbnail,
		&i.Metadata,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT id, name, description, category, price, thumbnail, metadata, createdat, updatedat FROM Items
WHERE id > $1
ORDER BY id
LIMIT $2
`

type ListItemsParams struct {
	After int64
	First int32
}

func (q *Queries) ListItems(ctx context.Context, arg ListItemsParams) ([]Item, error) {
	rows, err := q.db.Query(ctx, listItems, arg.After, arg.First)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Thumbnail,
			&i.Metadata,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchItems = `-- name: SearchItems :many
SELECT id, name, description, category, price, thumbnail, metadata, createdat, updatedat FROM Items
WHERE Name LIKE $1
`

func (q *Queries) SearchItems(ctx context.Context, name string) ([]Item, error) {
	rows, err := q.db.Query(ctx, searchItems, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Thumbnail,
			&i.Metadata,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
