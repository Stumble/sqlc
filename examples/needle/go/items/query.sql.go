// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package items

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v5"
)

const createItems = `-- name: CreateItems :one
INSERT INTO Items (
  Name, Description, Category, Price, Thumbnail, Metadata
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, name, description, category, price, thumbnail, metadata, createdat, updatedat
`

type CreateItemsParams struct {
	Name        string
	Description string
	Category    Itemcategory
	Price       pgtype.Numeric
	Thumbnail   string
	Metadata    []byte
}

func (q *Queries) CreateItems(ctx context.Context, arg CreateItemsParams) (*Item, error) {
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 0)
		row := q.db.WQueryRow(ctx, "CreateItems", createItems,
			arg.Name,
			arg.Description,
			arg.Category,
			arg.Price,
			arg.Thumbnail,
			arg.Metadata,
		)
		i := &Item{}
		err := row.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Thumbnail,
			&i.Metadata,
			&i.Createdat,
			&i.Updatedat,
		)
		if err == pgx.ErrNoRows {
			return nil, cacheDuration, nil
		}
		return i, cacheDuration, err
	}
	if q.cache == nil {
		v, _, err := dbRead()
		return v.(*Item), err
	}

	// TODO(mustRevalidate, noStore)
	var v *Item
	err := q.cache.GetWithTtl(ctx, "TODO", &v, dbRead, false, false)
	if err != nil {
		return nil, err
	}
	return v, err

}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM Items
WHERE id = $1
`

// -- invalidate : [GetItemByID, ListItems]
func (q *Queries) DeleteItem(ctx context.Context, id int64) error {
	_, err := q.db.WExec(ctx, "DeleteItem", deleteItem, id)
	return err
}

const getItemByID = `-- name: GetItemByID :one
SELECT id, name, description, category, price, thumbnail, metadata, createdat, updatedat FROM Items
WHERE id = $1 LIMIT 1
`

// -- cache : 5m
func (q *Queries) GetItemByID(ctx context.Context, id int64) (*Item, error) {
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 300000)
		row := q.db.WQueryRow(ctx, "GetItemByID", getItemByID, id)
		i := &Item{}
		err := row.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Category,
			&i.Price,
			&i.Thumbnail,
			&i.Metadata,
			&i.Createdat,
			&i.Updatedat,
		)
		if err == pgx.ErrNoRows {
			return nil, cacheDuration, nil
		}
		return i, cacheDuration, err
	}
	if q.cache == nil {
		v, _, err := dbRead()
		return v.(*Item), err
	}

	// TODO(mustRevalidate, noStore)
	var v *Item
	err := q.cache.GetWithTtl(ctx, "TODO", &v, dbRead, false, false)
	if err != nil {
		return nil, err
	}
	return v, err

}

const listItems = `-- name: ListItems :many
SELECT id, name, description, category, price, thumbnail, metadata, createdat, updatedat FROM Items
WHERE id > $1
ORDER BY id
LIMIT $2
`

type ListItemsParams struct {
	After int64
	First int32
}

func (q *Queries) ListItems(ctx context.Context, arg ListItemsParams) ([]Item, error) {
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 0)
		rows, err := q.db.WQuery(ctx, "ListItems", listItems, arg.After, arg.First)
		if err != nil {
			return nil, 0, err
		}
		defer rows.Close()
		var items []Item
		for rows.Next() {
			var i Item
			if err := rows.Scan(
				&i.ID,
				&i.Name,
				&i.Description,
				&i.Category,
				&i.Price,
				&i.Thumbnail,
				&i.Metadata,
				&i.Createdat,
				&i.Updatedat,
			); err != nil {
				return nil, 0, err
			}
			items = append(items, i)
		}
		if err := rows.Err(); err != nil {
			return nil, 0, err
		}
		return items, cacheDuration, nil
	}
	if q.cache == nil {
		items, _, err := dbRead()
		return items.([]Item), err
	}

	// TODO(mustRevalidate, noStore)
	var items []Item
	err := q.cache.GetWithTtl(ctx, "TODO", &items, dbRead, false, false)
	if err != nil {
		return nil, err
	}
	return items, err
}

const listSomeItems = `-- name: ListSomeItems :many
SELECT id, name, description, category, price, thumbnail, metadata, createdat, updatedat FROM Items
WHERE id = ANY($1::bigserial[])
`

func (q *Queries) ListSomeItems(ctx context.Context, ids []int64) ([]Item, error) {
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 0)
		rows, err := q.db.WQuery(ctx, "ListSomeItems", listSomeItems, ids)
		if err != nil {
			return nil, 0, err
		}
		defer rows.Close()
		var items []Item
		for rows.Next() {
			var i Item
			if err := rows.Scan(
				&i.ID,
				&i.Name,
				&i.Description,
				&i.Category,
				&i.Price,
				&i.Thumbnail,
				&i.Metadata,
				&i.Createdat,
				&i.Updatedat,
			); err != nil {
				return nil, 0, err
			}
			items = append(items, i)
		}
		if err := rows.Err(); err != nil {
			return nil, 0, err
		}
		return items, cacheDuration, nil
	}
	if q.cache == nil {
		items, _, err := dbRead()
		return items.([]Item), err
	}

	// TODO(mustRevalidate, noStore)
	var items []Item
	err := q.cache.GetWithTtl(ctx, "TODO", &items, dbRead, false, false)
	if err != nil {
		return nil, err
	}
	return items, err
}

const searchItems = `-- name: SearchItems :many
SELECT id, name, description, category, price, thumbnail, metadata, createdat, updatedat FROM Items
WHERE Name LIKE $1
`

func (q *Queries) SearchItems(ctx context.Context, name string) ([]Item, error) {
	dbRead := func() (any, time.Duration, error) {
		cacheDuration := time.Duration(time.Millisecond * 0)
		rows, err := q.db.WQuery(ctx, "SearchItems", searchItems, name)
		if err != nil {
			return nil, 0, err
		}
		defer rows.Close()
		var items []Item
		for rows.Next() {
			var i Item
			if err := rows.Scan(
				&i.ID,
				&i.Name,
				&i.Description,
				&i.Category,
				&i.Price,
				&i.Thumbnail,
				&i.Metadata,
				&i.Createdat,
				&i.Updatedat,
			); err != nil {
				return nil, 0, err
			}
			items = append(items, i)
		}
		if err := rows.Err(); err != nil {
			return nil, 0, err
		}
		return items, cacheDuration, nil
	}
	if q.cache == nil {
		items, _, err := dbRead()
		return items.([]Item), err
	}

	// TODO(mustRevalidate, noStore)
	var items []Item
	err := q.cache.GetWithTtl(ctx, "TODO", &items, dbRead, false, false)
	if err != nil {
		return nil, err
	}
	return items, err
}
