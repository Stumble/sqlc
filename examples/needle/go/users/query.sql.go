// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package users

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const complicated = `-- name: Complicated :many
WITH RECURSIVE fibonacci(n,x,y) AS (
	SELECT
    	1 AS n ,
  		0 :: NUMERIC AS x,
    	1 :: NUMERIC AS y
  	UNION ALL
  	SELECT
    	n + 1 AS n,
  		y AS x,
    	x + y AS y
  	FROM fibonacci
  	WHERE n < $1::int
	)
SELECT
	x
FROM fibonacci
`

// -- cache : 1m
// example of sqlc cannot handle recursive query.
func (q *Queries) Complicated(ctx context.Context, n int32) ([]pgtype.Numeric, error) {
	rows, err := q.db.Query(ctx, complicated, n)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.Numeric
	for rows.Next() {
		var x pgtype.Numeric
		if err := rows.Scan(&x); err != nil {
			return nil, err
		}
		items = append(items, x)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO Users (
  Name, Metadata, Thumbnail
) VALUES (
  $1, $2, $3
)
RETURNING id, name, metadata, thumbnail, createdat
`

type CreateAuthorParams struct {
	Name      string
	Metadata  []byte
	Thumbnail string
}

// -- invalidate : [GetUserByID, GetUserByName]
func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (User, error) {
	row := q.db.QueryRow(ctx, createAuthor, arg.Name, arg.Metadata, arg.Thumbnail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Metadata,
		&i.Thumbnail,
		&i.Createdat,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM Users
WHERE id = $1
`

// -- invalidate : [GetUserByID, GetUserByName]
func (q *Queries) DeleteAuthor(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAuthor, id)
	return err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, metadata, thumbnail, createdat FROM Users
WHERE id = $1 LIMIT 1
`

// -- cache : 5m
func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Metadata,
		&i.Thumbnail,
		&i.Createdat,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, metadata, thumbnail, createdat FROM Users
WHERE Name = $1 LIMIT 1
`

// -- cache : 5m
func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Metadata,
		&i.Thumbnail,
		&i.Createdat,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, metadata, thumbnail, createdat FROM users
WHERE id > $1
ORDER BY id
LIMIT $2
`

type ListUsersParams struct {
	After int32
	First int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.After, arg.First)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Metadata,
			&i.Thumbnail,
			&i.Createdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
